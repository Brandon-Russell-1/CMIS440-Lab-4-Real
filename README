 Program Name: CMIS440 Lab 4 Address Book Web App
 @author Brandon R Russell
 @Course CMIS440
 Date: Jan 6, 2011
 IDE: MyEclipse 9.0 M1
 OS: Windows 7 64 bit
 Java: JDK 1.6.0_13, Java EE 5, JSF 1.2, JPA 1.0 w/ Derby and EclipseLink, 
		IceFaces 1.8.1, GlassFish 2.1.1 & GlassFish v3 Prelude
 Tested on Firefox 3.6.13 w/ 22in, 17in, and 14in monitors w/ 1680x1050, 1440x900, 
 													and 1280x1024 resolution settings.
 Files: AddressBean.java, Logger.java, SortableList.java, Addresses.java, 
 		 AddressesDAO.java, EntityManagerHelper.java, persistence.xml, faces-config.xml,
        web.xml, AddressBook.jspx, AddressBookCSS.css, index.html, ErrorPage.jspx,
        ErrorPageCSS.css, ErrorRedirect.jsp

 Program Requirements: 
Minimum Assignment Requirements. Extend the example web application in Chapter 30 as follows:
Add fields for Email Address and Phone Number to the Addresses Table in the AddressBook 
	database.
Add labels and text fields, with appropriate validators, to all presentation forms for the 
	Email Address and Phone Number fields.
Implement a delete record functionality. The basic approach is to have the user search
 	for a record and then be given the option to delete this record.
Implement an update record functionality. The basic approach is to have the user search
 	for a record and then be allowed to make changes and save these changes back to the 
 	database.
 Assignment Optional Implementations: 
Incorporate trace logging into the Java code classes. These trace logs are invaluable in
tracking down customer reported issues. When writing to your log file, ask yourself:
'What will I need to know if a customer reports an issue and all I have is my trace 
log to analysis and resolve the issue'. To implement your trace logging, create a class
called Logger that takes a file name and optional path in its constructor and provides
one or more log methods. The default file name will be AddressBook.log and the default
file path will be the current working directory. Possible log methods might be: 
log(String msg) - log the given message to the provided Path/File Name. 
log(String msg, int value) - log the given message and value to the provided Path/File Name 
in a format: message = value 

Program Design: The basic program design is that once the program is loaded the user 
can enter into one form a new address to be entered into the database. In the next 
form the user has the option to do a search by last name, which utilizes autocomplete,
and displays the results in the datatable. Finally, the datatable/form allows the 
user to view and also edit/delete records. I went with a MVC design: the 
AddressBook.bean package is my Controller, the myPersistence package is my Model,
and the WebRoot files are my View.

Things you what me to know before I grade your work: Using MyEclipse, most of the 
persistence files in myPersistence package were auto-generated by the IDE; however,
even still I did go through each file making specific changes I needed plus adding
my own comments and styling throughout. The projects appears to work well on both
Glassfish 2.1.1 and v3 Prelude, but I think for some reason it works best on 
Glassfish 2.1.1. Also, I definitely went beyond the 80 character mark in a lot of
these files, but for some areas here and especially in the front-end code it was 
just more feasible to go beyond 80 characters. Also, if you change a field that is 
currently being used as the sorted field, you will have to hit update twice
since the field is going to move the first time to be properly sorted. In addition,
if you start to edit a file and get a error message because of bad input and then hit
the refresh button before fixing the error and not hitting the 'update' button, sometimes
the new value that is causing the error will linger in memory, though not saved to the
database.



Git Log:
-----------------------------------------------------------------------------------

